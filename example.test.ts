import request from "supertest";
import express, { RequestHandler } from "express";
import { Magic } from "@magic-sdk/admin";
import { describe, test, expect } from '@jest/globals'
import { encryptSession } from "./sessions";
import { setTokenCookie } from "./cookie";

// NOTE: Generate your own sk_test_key and then create a long lived token and
// swap it for the validToken below.
const MAGIC_SECRET_KEY = "sk_test_<please-insert-your-own>";

const magic = new Magic(MAGIC_SECRET_KEY);

const handler: RequestHandler = async (request, response) => {
  try {
    const authHeaders = request.headers.authorization;

    if (authHeaders) {
      const didToken = magic.utils.parseAuthorizationHeader(authHeaders);
      const metadata = await magic.users.getMetadataByToken(didToken);
      const session = { ...metadata };
      const token = await encryptSession(session);
      setTokenCookie(response, token);
      return response.status(200).json({ done: true });
    }

    return response.status(401).json({ message: "No token found in request." });
  } catch (error) {
    console.log(error);
    return response
      .status(error.status || 500)
      .json({ message: error.message });
  }
};

const PATH = "/user";
const app = express();

app.use(express.json());
app.get(PATH, handler);

describe("a test using magic", () => {
  test("it should pass", async () => {
    const validDidToken =
    "WyIweDA3OGVmZTFiZTIyN2ZiNTJlZjIwOGJkMmZjYTQyZTQ4MTI5Y2JkODljNjUyMTA0OTM3ZDRjOThjN2JkNWY1NTI1ZTkyMTY0ZTE2Y2YwNzk2MGI0YmM1MTQ1Mjg4Y2U4ZDVlMGIyNWExZTVkODRjMDFlMTY5NGZkYzA4YzRhMzVhMWIiLCJ7XCJpYXRcIjoxNjExNDkzNTIwLFwiZXh0XCI6MjYxMTQ5MzUxOSxcImlzc1wiOlwiZGlkOmV0aHI6MHhENTNkODg4MGU4MkNCNzc2N2NiMjdBNEY4NUI1NjU0M2E3NWNFQWIyXCIsXCJzdWJcIjpcInBsYjlzTmphWFl3d1RNWFl0Y0JRamZobTV4ak0yaGtvaVFpTHhyQW1UYTA9XCIsXCJhdWRcIjpcIk9YZVFGRGhMdTZnQ1IxakRSZjlIc3pwVUlFcm9DOEpGU19qUmZEZENremc9XCIsXCJuYmZcIjoxNjExNDkzNTIwLFwidGlkXCI6XCIyMzE1NTE0YS1jZWIyLTQyMGMtYTliNS03NmI4Yzk0NmE1MWZcIixcImFkZFwiOlwiMHhmNWM2YTE0ZmNlMWYwZGVjOGFjMzdjNTlhMzRkYWI0NmJlNDc0NWU3NjBkM2VhMTNiYjI1ODMyN2M2OTBkY2Y3MWMwYTVjYzkwN2M0YTBiNTRkY2U1YzI4NDBhODMwZGYxYjc2ZTVhY2ZiYjY2ZTE4NDc0MmU5YzJlMTQwNzIyZDFjXCJ9Il0=";

    const response = await request(app)
      .get(PATH)
      .set("Authorization", `Bearer ${validDidToken}`)
      .expect(200);

    const actual = response.body;
    const expected = {};

    expect(actual).toEqual(expected);
  });
});
